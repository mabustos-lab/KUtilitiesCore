name: Publish NuGet Packages

on:
  push:
    tags:
      - 'v*.*.*' # Solo ejecuta cuando haya un tag de versión (ej: v1.2.3)

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            4.8.x

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build all projects (except tests)
        run: |
          $projects = Get-ChildItem -Path . -Recurse -Include *.csproj | Where-Object {
            $_.FullName -notmatch 'Test|Tests|\.Tests\' # Excluye proyectos de pruebas
          }
          foreach ($proj in $projects) {
            dotnet build "$($proj.FullName)" --configuration Release --no-restore
          }
        shell: pwsh

      - name: Pack all projects (except tests)
        run: |
          $tag = '${{ github.ref }}' -replace 'refs/tags/v',''
          $projects = Get-ChildItem -Path . -Recurse -Include *.csproj | Where-Object {
            $_.FullName -notmatch 'Test|Tests|\.Tests\' # Excluye proyectos de pruebas
          }
          foreach ($proj in $projects) {
            dotnet pack "$($proj.FullName)" --configuration Release --no-build --output ./nupkgs /p:PackageVersion=$tag
          }
        shell: pwsh

      - name: Push NuGet packages
        run: |
          $ErrorActionPreference = "Stop"
          $pkgs = Get-ChildItem -Path ./nupkgs -Filter *.nupkg
          foreach ($pkg in $pkgs) {
            dotnet nuget push "$($pkg.FullName)" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          }
        shell: pwsh